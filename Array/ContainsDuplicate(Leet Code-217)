// Method 1: Low Memory Use
// Time Complexity: O(n log n)
// Space Complexity: O(1) (assuming in-place sort)

class Solution {
    public boolean containsDuplicate(int[] nums) {
     Arrays.sort(nums);
     int n=nums.length;
     for(int i=1;i<n;i++){
        if(nums[i]==nums[i-1]){
            return true;
        }
     }
     return false;
    }
}
// Method 2: Fast Solution Using HashSet
// Time Complexity: O(n)
// Space Complexity: O(n)

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer>numbers=new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(numbers.contains(nums[i]))return true;
            numbers.add(nums[i]);
        }
        return false;
    }
}
